import {LoggerInterface} from "./Logger/LoggerInterface";

export class LaunchMapBuilder {

    private fs;

    public constructor(private logger: LoggerInterface, private libModulePath = "ts-x-unit") {
        this.fs = require("fs");
    }

    public buildSuiteLauncher(suiteLaunchMap: {}): void {
        let unitPerLines = [];
        let unitImports = [];

        for (let key in suiteLaunchMap) {
            let value = suiteLaunchMap[key];
            let unitImportRefPath = this.getImportRefPath(value);
            let unitSafeName = this.getUnitUniqNameByPath(unitImportRefPath);

            let unitName = this.getUnitName(unitSafeName);
            unitImports.push("import {" + unitName + " as " + unitSafeName + "} from \"" + unitImportRefPath + "\";\n");
            let newInstanceExpression = "new " + unitSafeName + "()";
            unitPerLines.push("    \"" + key + "\": " + newInstanceExpression);
        }

        let data = "// this file auto generated by *Test.ts source files. \n";
        data += "import TSxUnit = require(\"" + this.libModulePath + "\");\n";
        data += "// end of core requirements \n";
        data += unitImports.join("");
        data += "let suiteLaunchMap = {\n";
        data += unitPerLines.join(",\n") + "\n};\n";
        data += "let printer = new TSxUnit.PrinterFactory().buildPrinter(TSxUnit.PrinterType.console);\n";
        data += "let suiteRunner = new TSxUnit.Runner(TSxUnit.createLoggerInstance(\"Suite.Runner\"), printer);\n";
        let argumentsPart = "let runnerArgumentParser = new TSxUnit.RunnerArgumentParser(process.argv);\n" +
            "let pathToRunPattern = runnerArgumentParser.getMethodPattern();\n" +
            "let testMethodToRunPattern = runnerArgumentParser.getPathToRunPattern();\n";
        data += argumentsPart;
        data += "suiteRunner.run(suiteLaunchMap, pathToRunPattern, testMethodToRunPattern);\n";

        this.writeSuiteLauncher(data);
    }

    private writeSuiteLauncher(data: string): void {
        let suiteLauncherFilename = "tests/suite.ts";
        this.fs.writeFileSync(suiteLauncherFilename, data);
        this.logger.debug(data.length + " bytes written to " + suiteLauncherFilename);
    }

    private getUnitUniqNameByPath(path: string): string {
        return path.replace(/[\/\\\.]/g, "_");
    }

    private getImportRefPath(path: string): string {
        return path.replace(".ts", "");
    }

    private getUnitName(unitSafeName: string): string {
        let parts = unitSafeName.split("_");
        return parts.pop();
    }

}
